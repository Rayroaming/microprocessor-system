#include "stm32f769xx.h"
#include<stdlib.h>
#include<stdint.h>
#include "init.h"

int main(void)
{
	Sys_Init();
	//LD1 Initialization
	__HAL_RCC_GPIOJ_CLK_ENABLE();
	GPIO_InitTypeDef PJ;
	PJ.Pin = GPIO_PIN_13;
	PJ.Mode = GPIO_MODE_OUTPUT_PP;
	PJ.Pull = GPIO_PULLUP;
	PJ.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOJ, &PJ);
	//B_USER Initialization
	__HAL_RCC_GPIOA_CLK_ENABLE();//enable CLK A, B_USER
	GPIO_InitTypeDef PA;
	PA.Pin = GPIO_PIN_0;
	PA.Mode = GPIO_MODE_INPUT;
	PA.Pull = GPIO_PULLUP;
	PA.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOA, &PA);
	//printf("\e[2J\e[H");
	//fflush(stdout);
	printf("\e[2J\e[1;1H");
	fflush(stdout);
	//maze initialization
	int wall[10][10];
	int i=0;
	int j=0;
	for (i=0; i<10; i++)
	{
		for (j=0; j<10; j++)
		{
			if (i == 0 || i == 9 || j == 0 || j == 9 || j == 2 || j == 4 || j == 6)
				wall[i][j] = 1;
			else
				wall[i][j] = 0;
		}
	}
	wall[8][2] = 0;
	wall[1][4] = 0;
	wall[8][6] = 0;
	//wall[4][8] = 2;
	for (i=0; i<10 ; i++)
	{
		for (j=0; j<10; j++)
		{
			if (j==9) //entering the nest line
				printf("\e[44m \e[0m\r\n");
				//printf("%d\r\n",wall[i][j]);
			else //print out the wall
			{
				if(wall[i][j]==1)
				{
					printf("\e[44m \e[0m");
				//printf("%d",wall[i][j]);
					fflush(stdout);
				}
				//else if (wall[i][j]==2) // the treasure place
				//{
					//printf("\e[41m \e[0m");
					//fflush(stdout);
				//}
				else //the path
				{
					printf(" ");
					fflush(stdout);
				}
			}
		}
	}
	printf("\e[5;9H\e[41m \e[0m");
	printf("\e[2;2H\e[37m*\e[0m\e[1D");
	fflush(stdout);
	//control section
	char key;
	i=1;
	j=1;
	while(1)
	{
		key=getchar();
		if (key == 119 && wall[i-1][j] == 0)//w
		{
			printf("\e[0m \e[1D");
			fflush(stdout);
			i -= 1;
			printf("\e[1A\e[37m*\e[0m\e[1D");
			fflush(stdout);
		}
		else if (key == 115 && wall[i+1][j] == 0 )//s
		{
			printf("\e[0m \e[1D");
			fflush(stdout);
			i += 1;
			printf("\e[1B\e[37m*\e[0m\e[1D");
			fflush(stdout);
		}
		else if (key == 97 && wall[i][j-1] == 0)//a
		{
			printf("\e[0m \e[1D");
			fflush(stdout);
			j -=1;
			printf("\e[1D\e[37m*\e[0m\e[1D");
			fflush(stdout);
		}
		else if (key == 100 && wall[i][j+1] == 0)//d
		{
			printf("\e[0m \e[1D");
			fflush(stdout);
			j +=1;
			printf("\e[1C\e[37m*\e[0m\e[1D");
			fflush(stdout);
		}
		if ( i == 4 && j == 8)
		{
			printf("\e[41m \e[0m");
			fflush(stdout);
			printf("\e[11;1H\e[37mCongratulation!YOU WIN!\e[0m\r\n");
			HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_SET);
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
		{
			i = 1;
			j = 1;
			HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
			printf(" ");
			fflush(stdout);
			printf("\e[11;1H\e[J");
			fflush(stdout);
			printf("\e[2;2H\e[37m*\e[0m\e[1D");
			fflush(stdout);
		}
	}
}

